"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const schematics_1 = require("@angular-devkit/schematics");
const util_1 = require("./utility/util");
const parseName_1 = require("./utility/parseName");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const dependencies_1 = require("./utility/dependencies");
function default_1(options) {
    return (tree, context) => {
        return schematics_1.chain([addNgRxFiles(options), updateDependencies()])(tree, context);
    };
}
exports.default = default_1;
function updateDependencies() {
    return (tree, context) => {
        context.logger.debug("Updating dependencies...");
        context.addTask(new tasks_1.NodePackageInstallTask());
        const addDependencies = rxjs_1.of("@ngrx/store", "@ngrx/entity", "@ngrx/effects", "@ngrx/router-store").pipe(operators_1.concatMap((packageName) => util_1.getLatestNodeVersion(packageName)), operators_1.map((packageFromRegistry) => {
            const { name, version } = packageFromRegistry;
            context.logger.debug(`Adding ${name}:${version} to ${dependencies_1.NodeDependencyType.Default}`);
            dependencies_1.addPackageJsonDependency(tree, {
                type: dependencies_1.NodeDependencyType.Default,
                name,
                version
            });
            return tree;
        }));
        const addDevDependencies = rxjs_1.of("@ngrx/store-devtools", "ngrx-store-freeze", "jasmine-marbles").pipe(operators_1.concatMap((packageName) => util_1.getLatestNodeVersion(packageName)), operators_1.map((packageFromRegistry) => {
            const { name, version } = packageFromRegistry;
            context.logger.debug(`Adding ${name}:${version} to ${dependencies_1.NodeDependencyType.Dev}`);
            dependencies_1.addPackageJsonDependency(tree, {
                type: dependencies_1.NodeDependencyType.Dev,
                name,
                version
            });
            return tree;
        }));
        return rxjs_1.concat(addDependencies, addDevDependencies);
    };
}
function addNgRxFiles(options) {
    return (tree, context) => {
        if (!options.name) {
            throw new schematics_1.SchematicsException("Entity name is required");
        }
        if (!options.path) {
            // todo: determine default based on current working dir
            options.path = `./src/app/state`;
            console.log(`No Entity path specified, adding files to ${options.path}`);
        }
        context.logger.debug(`adding NgRX files to ${options.path} dir`);
        const parsedPath = parseName_1.parseName(options.path, options.name);
        options.name = parsedPath.name;
        options.path = parsedPath.path;
        const templateSource = schematics_1.apply(schematics_1.url("./__files__"), [
            options.init && !tree.exists(`${parsedPath.path}/app.interfaces.ts`)
                ? schematics_1.noop()
                : schematics_1.filter(path => !path.endsWith("app.interfaces.ts")),
            options.init && !tree.exists(`${parsedPath.path}/app.reducer.ts`)
                ? schematics_1.noop()
                : schematics_1.filter(path => !path.endsWith("app.reducer.ts")),
            options.init && !tree.exists(`${parsedPath.path}/state-utils.ts`)
                ? schematics_1.noop()
                : schematics_1.filter(path => !path.endsWith("state-utils.ts")),
            options.init && !tree.exists(`${parsedPath.path}/state.module.ts`)
                ? schematics_1.noop()
                : schematics_1.filter(path => !path.endsWith("state.module.ts")),
            schematics_1.template(Object.assign({}, core_1.strings, { "if-flat": (s) => (options.flat ? "" : s) }, options)),
            schematics_1.move(options.path)
        ]);
        return schematics_1.chain([schematics_1.mergeWith(templateSource)])(tree, context);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUErQztBQUMvQyw0REFBMEU7QUFDMUUsMkRBYW9DO0FBQ3BDLHlDQUl3QjtBQUN4QixtREFBZ0Q7QUFDaEQsK0JBQThDO0FBQzlDLDhDQUFnRDtBQUNoRCx5REFHZ0M7QUFFaEMsbUJBQXdCLE9BQW9CO0lBQzFDLE9BQU8sQ0FBQyxJQUFVLEVBQUUsT0FBeUIsRUFBRSxFQUFFO1FBQy9DLE9BQU8sa0JBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUpELDRCQUlDO0FBRUQsU0FBUyxrQkFBa0I7SUFDekIsT0FBTyxDQUFDLElBQVUsRUFBRSxPQUF5QixFQUFvQixFQUFFO1FBQ2pFLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDakQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDhCQUFzQixFQUFFLENBQUMsQ0FBQztRQUU5QyxNQUFNLGVBQWUsR0FBRyxTQUFFLENBQ3hCLGFBQWEsRUFDYixjQUFjLEVBQ2QsZUFBZSxFQUNmLG9CQUFvQixDQUNyQixDQUFDLElBQUksQ0FDSixxQkFBUyxDQUFDLENBQUMsV0FBbUIsRUFBRSxFQUFFLENBQUMsMkJBQW9CLENBQUMsV0FBVyxDQUFDLENBQUMsRUFDckUsZUFBRyxDQUFDLENBQUMsbUJBQWdDLEVBQUUsRUFBRTtZQUN2QyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLG1CQUFtQixDQUFDO1lBQzlDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNsQixVQUFVLElBQUksSUFBSSxPQUFPLE9BQU8saUNBQWtCLENBQUMsT0FBTyxFQUFFLENBQzdELENBQUM7WUFFRix1Q0FBd0IsQ0FBQyxJQUFJLEVBQUU7Z0JBQzdCLElBQUksRUFBRSxpQ0FBa0IsQ0FBQyxPQUFPO2dCQUNoQyxJQUFJO2dCQUNKLE9BQU87YUFDUixDQUFDLENBQUM7WUFFSCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUNILENBQUM7UUFFRixNQUFNLGtCQUFrQixHQUFHLFNBQUUsQ0FDM0Isc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixpQkFBaUIsQ0FDbEIsQ0FBQyxJQUFJLENBQ0oscUJBQVMsQ0FBQyxDQUFDLFdBQW1CLEVBQUUsRUFBRSxDQUFDLDJCQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQ3JFLGVBQUcsQ0FBQyxDQUFDLG1CQUFnQyxFQUFFLEVBQUU7WUFDdkMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztZQUM5QyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDbEIsVUFBVSxJQUFJLElBQUksT0FBTyxPQUFPLGlDQUFrQixDQUFDLEdBQUcsRUFBRSxDQUN6RCxDQUFDO1lBRUYsdUNBQXdCLENBQUMsSUFBSSxFQUFFO2dCQUM3QixJQUFJLEVBQUUsaUNBQWtCLENBQUMsR0FBRztnQkFDNUIsSUFBSTtnQkFDSixPQUFPO2FBQ1IsQ0FBQyxDQUFDO1lBRUgsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTyxhQUFNLENBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLE9BQW9CO0lBQ3hDLE9BQU8sQ0FBQyxJQUFVLEVBQUUsT0FBeUIsRUFBRSxFQUFFO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxnQ0FBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDakIsdURBQXVEO1lBQ3ZELE9BQU8sQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7WUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUU7UUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUM7UUFFakUsTUFBTSxVQUFVLEdBQUcscUJBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDL0IsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1FBRS9CLE1BQU0sY0FBYyxHQUFHLGtCQUFLLENBQUMsZ0JBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMvQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLG9CQUFvQixDQUFDO2dCQUNsRSxDQUFDLENBQUMsaUJBQUksRUFBRTtnQkFDUixDQUFDLENBQUMsbUJBQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksaUJBQWlCLENBQUM7Z0JBQy9ELENBQUMsQ0FBQyxpQkFBSSxFQUFFO2dCQUNSLENBQUMsQ0FBQyxtQkFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDcEQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxpQkFBaUIsQ0FBQztnQkFDL0QsQ0FBQyxDQUFDLGlCQUFJLEVBQUU7Z0JBQ1IsQ0FBQyxDQUFDLG1CQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNwRCxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLGtCQUFrQixDQUFDO2dCQUNoRSxDQUFDLENBQUMsaUJBQUksRUFBRTtnQkFDUixDQUFDLENBQUMsbUJBQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3JELHFCQUFRLG1CQUNILGNBQU8sSUFDVixTQUFTLEVBQUUsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFDOUMsT0FBTyxFQUNWO1lBQ0YsaUJBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ25CLENBQUMsQ0FBQztRQUVILE9BQU8sa0JBQUssQ0FBQyxDQUFDLHNCQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUN2QyxJQUFJLEVBQ0osT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDIn0=