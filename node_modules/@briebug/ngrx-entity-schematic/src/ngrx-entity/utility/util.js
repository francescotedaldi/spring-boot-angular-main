"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const dependencies_1 = require("./dependencies");
const json_utils_1 = require("./json-utils");
const http_1 = require("http");
var Paths;
(function (Paths) {
    Paths["AngularJson"] = "./angular.json";
})(Paths = exports.Paths || (exports.Paths = {}));
var Configs;
(function (Configs) {
    Configs[Configs["JsonIndentLevel"] = 4] = "JsonIndentLevel";
})(Configs = exports.Configs || (exports.Configs = {}));
function getAngularVersion(tree) {
    const packageNode = dependencies_1.getPackageJsonDependency(tree, "@angular/core");
    const version = packageNode &&
        packageNode.version.split("").find(char => !!parseInt(char, 10));
    return version ? +version : 0;
}
exports.getAngularVersion = getAngularVersion;
function getWorkspacePath(host) {
    const possibleFiles = [
        "/angular.json",
        "/.angular.json",
        "/angular-cli.json"
    ];
    const path = possibleFiles.filter(path => host.exists(path))[0];
    return path;
}
exports.getWorkspacePath = getWorkspacePath;
function getWorkspace(host) {
    const path = getWorkspacePath(host);
    const configBuffer = host.read(path);
    if (configBuffer === null) {
        throw new schematics_1.SchematicsException(`Could not find (${path})`);
    }
    const content = configBuffer.toString();
    return core_1.parseJson(content, core_1.JsonParseMode.Loose);
}
exports.getWorkspace = getWorkspace;
function getSourcePath(tree, options) {
    const workspace = getWorkspace(tree);
    if (!options.project) {
        throw new schematics_1.SchematicsException('Option "project" is required.');
    }
    const project = workspace.projects[options.project];
    if (project.projectType !== "application") {
        throw new schematics_1.SchematicsException(`AddJest requires a project type of "application".`);
    }
    // const assetPath = join(project.root as Path, 'src', 'assets');
    const sourcePath = core_1.join(project.root, "src");
    return sourcePath;
}
exports.getSourcePath = getSourcePath;
// modified version from utility/dependencies/getPackageJsonDependency
function removePackageJsonDependency(tree, dependency) {
    const packageJsonAst = parseJsonAtPath(tree, dependencies_1.pkgJson.Path);
    const depsNode = json_utils_1.findPropertyInAstObject(packageJsonAst, dependency.type);
    const recorder = tree.beginUpdate(dependencies_1.pkgJson.Path);
    if (!depsNode) {
        // Haven't found the dependencies key.
        new schematics_1.SchematicsException("Could not find the package.json dependency");
    }
    else if (depsNode.kind === "object") {
        const fullPackageString = depsNode.text.split("\n").filter(pkg => {
            return pkg.includes(`"${dependency.name}"`);
        })[0];
        const commaDangle = fullPackageString && fullPackageString.trim().slice(-1) === "," ? 1 : 0;
        const packageAst = depsNode.properties.find(node => {
            return node.key.value.toLowerCase() === dependency.name.toLowerCase();
        });
        // TODO: does this work for the last dependency?
        const newLineIndentation = 5;
        if (packageAst) {
            // Package found, remove it.
            const end = packageAst.end.offset + commaDangle;
            recorder.remove(packageAst.key.start.offset, end - packageAst.start.offset + newLineIndentation);
        }
    }
    tree.commitUpdate(recorder);
}
exports.removePackageJsonDependency = removePackageJsonDependency;
function safeFileDelete(tree, path) {
    if (tree.exists(path)) {
        tree.delete(path);
        return true;
    }
    else {
        return false;
    }
}
exports.safeFileDelete = safeFileDelete;
function addPropertyToPackageJson(tree, context, propertyName, propertyValue) {
    const packageJsonAst = parseJsonAtPath(tree, dependencies_1.pkgJson.Path);
    const pkgNode = json_utils_1.findPropertyInAstObject(packageJsonAst, propertyName);
    const recorder = tree.beginUpdate(dependencies_1.pkgJson.Path);
    if (!pkgNode) {
        // outer node missing, add key/value
        json_utils_1.appendPropertyInAstObject(recorder, packageJsonAst, propertyName, propertyValue, Configs.JsonIndentLevel);
    }
    else if (pkgNode.kind === "object") {
        // property exists, update values
        for (let [key, value] of Object.entries(propertyValue)) {
            const innerNode = json_utils_1.findPropertyInAstObject(pkgNode, key);
            if (!innerNode) {
                // script not found, add it
                context.logger.debug(`creating ${key} with ${value}`);
                json_utils_1.insertPropertyInAstObjectInOrder(recorder, pkgNode, key, value, Configs.JsonIndentLevel);
            }
            else {
                // script found, overwrite value
                context.logger.debug(`overwriting ${key} with ${value}`);
                const { end, start } = innerNode;
                recorder.remove(start.offset, end.offset - start.offset);
                recorder.insertRight(start.offset, JSON.stringify(value));
            }
        }
    }
    tree.commitUpdate(recorder);
}
exports.addPropertyToPackageJson = addPropertyToPackageJson;
function getWorkspaceConfig(tree, options) {
    const workspace = getWorkspace(tree);
    const workspacePath = getWorkspacePath(tree);
    let projectName;
    let projectProps;
    if (options.__version__ >= 6) {
        projectName = options.project || workspace.defaultProject || "";
        projectProps = workspace.projects[projectName];
    }
    else if (options.__version__ < 6) {
        projectName = workspace.project.name || "";
        projectProps = workspace.apps[0];
    }
    return { projectProps, workspacePath, workspace, projectName };
}
exports.getWorkspaceConfig = getWorkspaceConfig;
/**
 * Angular5 (angular-cli.json) config is formatted into an array of applications vs Angular6's (angular.json) object mapping
 * multi-app Angular5 apps are currently not supported.
 *
 * @param tree
 * @param options
 */
function isMultiAppV5(tree, options) {
    const config = getWorkspaceConfig(tree, options);
    return options.__version__ < 6 && config.workspace.apps.length > 1;
}
exports.isMultiAppV5 = isMultiAppV5;
/**
 * Attempt to retrieve the latest package version from NPM
 * Return an optional "latest" version in case of error
 * @param packageName
 */
function getLatestNodeVersion(packageName) {
    const DEFAULT_VERSION = "latest";
    return new Promise(resolve => {
        return http_1.get(`http://registry.npmjs.org/${packageName}`, res => {
            let rawData = "";
            res.on("data", chunk => (rawData += chunk));
            res.on("end", () => {
                try {
                    const response = JSON.parse(rawData);
                    const version = (response && response["dist-tags"]) || {};
                    resolve(buildPackage(packageName, version.latest));
                }
                catch (e) {
                    resolve(buildPackage(packageName));
                }
            });
        }).on("error", () => resolve(buildPackage(packageName)));
    });
    function buildPackage(name, version = DEFAULT_VERSION) {
        return { name, version };
    }
}
exports.getLatestNodeVersion = getLatestNodeVersion;
function parseJsonAtPath(tree, path) {
    const buffer = tree.read(path);
    if (buffer === null) {
        throw new schematics_1.SchematicsException("Could not read package.json.");
    }
    const content = buffer.toString();
    const json = core_1.parseJsonAst(content, core_1.JsonParseMode.Strict);
    if (json.kind != "object") {
        throw new schematics_1.SchematicsException("Invalid package.json. Was expecting an object");
    }
    return json;
}
exports.parseJsonAtPath = parseJsonAtPath;
//# sourceMappingURL=data:application/json;base64,